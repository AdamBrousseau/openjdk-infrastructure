########################################
# AdoptOpenJDK - Ansible Playbook for: #
# ----- Ubuntu 14 and 16 on x86 -----  #
# -------- Ubuntu 16 on s390 --------  #
# -------- Ubuntu 16 on ARM ---------  #
########################################

- hosts: all
  remote_user: root
  become: yes
  tasks:
  - block:
  
    ######################
    # Load variable file #
    ######################
    - name: Load AdoptOpenJDKs variable file
      include_vars: adoptopenjdk_variables.yml

    ###############################
    # Update and Install Packages #
    ###############################
    - name: Ensure aptitude is installed on Ubuntu 16 systems
      apt: pkg=aptitude state=latest update_cache=yes
      when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "16")

    - name: Add the openjdk repository to apt
      apt_repository: repo='ppa:openjdk-r/ppa'

    - name: OS update -- apt-get upgrade
      apt: upgrade=safe update_cache=yes

    - name: Install Build tools
      apt: pkg={{ item }} state=latest
      with_items:
        - autoconf
        - ccache
        - cpanminus
        - cpio
        - g++
        - gcc
        - git
        - libasound2-dev
        - libcups2-dev
        - libffi-dev
        - libx11-dev
        - libxext-dev
        - libxrender-dev
        - libxt-dev
        - libxtst-dev
        - make
        - ntp
        - openjdk-7-jdk
        - openjdk-8-jdk
        - wget
        - zip
        - pkg-config

    - name: Install Test tools
      apt: name={{item}} state=installed
      with_items:
        - ant
        - ant-contrib
        - jq
        - perl
        - pulseaudio
        - xauth
        - xorg

    - name: Install xserver-xorg-legacy on Ubuntu 16
      apt: name=xserver-xorg-legacy state=installed
      when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "16")

    - name: Install libfreetype6-dev on Ubuntu 16 s390
      apt: name=libfreetype6-dev state=installed
      when: (ansible_architecture == "s390x")
      
    ################
    # Jenkins user #
    ################
    - name: Create Jenkins user
      action: user name={{ Jenkins_Username }} state=present
      ignore_errors: yes
      
    - name: Create Jenkins user home folder
      file:
        path: /home/{{ Jenkins_Username }}
        state: directory
        owner: "{{ Jenkins_Username }}"
        group: "{{ Jenkins_Username }}"
        mode: 0700
      when: (ansible_architecture == "s390x")

    - name: Set authorized key for Jenkins user
      authorized_key:
        user: "{{ Jenkins_Username }}"
        state: present
        key: "{{ lookup('file', '{{ Jenkins_User_SSHKey }}') }}"

    - name: Add Jenkins user to the audio group
      user: name={{ Jenkins_Username }}
        groups=audio
        append=yes
        
    #######################
    # Additional Packages #
    #######################
    - name: Check if ccache is already installed
      shell: dpkg-query -l ccache
      register: ccache_status
      ignore_errors: yes
        
    - name: Download ccache.tar.gz
      get_url:
        url: https://www.samba.org/ftp/ccache/ccache-3.1.9.tar.gz
        dest: /home/{{ Jenkins_Username }}/ccache.tar.gz
        mode: 0440
      when: ccache_status.stdout.find('no packages found') != -1
      
    - name: Extract ccache
      unarchive:
        src: /home/{{ Jenkins_Username }}/ccache.tar.gz
        dest: /home/{{ Jenkins_Username }}
        copy: False
      when: ccache_status.stdout.find('no packages found') != -1

    - name: Running ./configure & make for CCACHE
      shell: cd /home/{{ Jenkins_Username }}/ccache-3.1.9 && ./configure && make && sudo make install
      become: yes
      when: ccache_status.stdout.find('no packages found') != -1
      
    - name: Install JSON
      shell: |
        cpanm --with-recommends JSON

    - name: Install Text::CSV
      shell: |
        cpanm --with-recommends Text::CSV   

    ##################
    # Nagios plugins #
    ##################
    - name: Include Nagios Playbook
      include_tasks: nagios/nagios_ubuntu.yml
      when: Nagios_Plugins == "Enabled"

    #####################
    # superuser account #
    #####################
    - name: Setup zeus user
      shell: adduser zeus --shell /bin/bash --disabled-password --gecos ""
      ignore_errors: yes
      when: Superuser_Account == "Enabled"

    - name: Create SSH Key folder for zeus
      file:
        path: /home/zeus/.ssh
        owner: zeus
        group: zeus
        mode: 0700
        state: directory
      when: Superuser_Account == "Enabled"

    - name: Add key
      authorized_key:
        user: zeus
        state: present
        key: "{{ lookup('file', '{{ Zeus_User_SSHKey }}') }}"
      when: Superuser_Account == "Enabled"

    - name: Grant zeus sudo powers
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^zeus'
        line: 'zeus ALL=(ALL) NOPASSWD: ALL'
      when: Superuser_Account == "Enabled"

    #############
    # swap file #
    #############

    - name: Check if swap file exists
      shell: cat /etc/fstab
      register: check_fstab

    - name: Create swap file
      command: fallocate -l 2G /swapfile
      when: check_fstab.stdout.find('swap') == ""

    - name: Set swap file permissions
      file: path=/swapfile
          owner=root
          group=root
          mode=0600
      when: check_fstab.stdout.find('swap') == ""

    - name: Create swap area device
      command: mkswap /swapfile
      when: check_fstab.stdout.find('swap') == ""

    - name: Mount swap file
      command: swapon /swapfile
      when: check_fstab.stdout.find('swap') == ""

    - name: Add swap to fstab
      mount: src=/swapfile
        name=none
        fstype=swap
        opts=sw
        passno=0
        dump=0
        state=present
      when: check_fstab.stdout.find('swap') == ""

    ####################
    # Auto OS patching #
    ####################
    - name: Add cron job to check for updates
      cron: name="Check for Updates every Sunday at 5am"
            weekday="6"
            minute="0"
            hour="5"
            user=root
            job="/usr/bin/apt-get update && /usr/bin/apt-get -y upgrade"
            state=present

    ###############
    # X11 Support #
    ###############
    - name: Create X11 Wrapper config file
      copy:
        content: |
          allowed_users=anybody
          needs_root_rights=yes
        dest: /etc/X11/Xwrapper.config
        group: root
        owner: root
        mode: 0644

    - name: Start X11
      become: yes
      become_user: "{{ Jenkins_Username }}"
      shell: startx -- :1 &
      ignore_errors: yes
      no_log: True

    ###################
    # NTP Time Server #
    ###################
    - name: Set timedatectl set-ntp no
      shell: timedatectl set-ntp no
      
    - name: Check if NTP pools are already configured
      shell: cat /etc/ntp.conf | grep "1.pool.ntp.org"
      register: check_ntp_pool
      ignore_errors: yes

    - name: Configure NTP pool Servers
      lineinfile: dest=/etc/ntp.conf
                insertafter='^NTP servers'
                line='pool 1.pool.ntp.org\npool 2.pool.ntp.org\npool 3.pool.ntp.org'
                state=present
      when: check_ntp_pool.stdout.find('1.pool.ntp.org') == ""

    - name: Start NTP
      service:
        name: ntp
        state: restarted

    ############
    # Clean up #
    ############
    - name: Remove unneeded packages from the cache
      apt:
        autoclean: yes
    
    - name: Remove apt dependencies that are no longer required
      apt:
        autoremove: yes

    ################
    # Pass or Fail #
    ################
    - name: Send Slack notification, successful
      include_tasks: slack_notification/successful_slack.yml
      when: Slack_Notification == "Enabled"

    rescue:
    - name: Send Slack notification, failure
      include_tasks: slack_notification/failure_slack.yml
      when: Slack_Notification == "Enabled"
